use super::externs::c_malloc
use super::externs::c_sprintf
use super::externs::c_gcvt
use super::externs::c_strcpy
use super::externs::c_strcat
use super::num::(*)
use super::eq::(*)

itoa a =
    let s = c_malloc 10
    c_sprintf s, "%d", a
    s

ftoa c =
    c_gcvt c, 10, (c_malloc 4), (c_malloc 4)

trait Show a
    show :: a -> String

impl Show Int64
    @show = itoa @

impl Show Float64
    @show = ftoa @

impl Show Bool
    @show =
        if @
        then "true"
        else "false"

impl Show String
    @show =
        let s = c_malloc c_strlen @
        c_strcpy s, @
        s

show_arr a =
    let s = c_malloc 100
    c_strcpy s, "["
    let i = 0
    let len = ~Len a a
    while i < len
        c_strcat s, a[i].show!
        c_strcat s, ", "
        i = i + 1
    c_strcat s, "]"
    s

impl Show [Int64]
    @show = show_arr @

impl Show [Float64]
    @show = show_arr @

impl Show [String]
    @show = show_arr @

impl Show [Bool]
    @show = show_arr @

